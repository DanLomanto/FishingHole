//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Common
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FishEntities : DbContext
    {
        public FishEntities()
            : base("name=FishEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<ImagePath> ImagePaths { get; set; }
        public virtual DbSet<Trip> Trips { get; set; }
    
        public virtual int CreateUser(string firstName, string lastName, string email, string password)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUser", firstNameParameter, lastNameParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetUser_Result> GetUser(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", emailParameter);
        }
    
        public virtual ObjectResult<DoesLoginExist_Result> DoesLoginExist(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DoesLoginExist_Result>("DoesLoginExist", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetUser1_Result> GetUser1(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser1_Result>("GetUser1", emailParameter);
        }
    
        public virtual ObjectResult<string> GetImagesForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetImagesForUser", userIDParameter);
        }
    
        public virtual int InsertImagePath(Nullable<int> userID, string imagePath)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var imagePathParameter = imagePath != null ?
                new ObjectParameter("ImagePath", imagePath) :
                new ObjectParameter("ImagePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertImagePath", userIDParameter, imagePathParameter);
        }
    
        public virtual ObjectResult<GetTripById_Result> GetTripById(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTripById_Result>("GetTripById", iDParameter);
        }
    
        public virtual int InsertTrip(string title, string description, Nullable<System.DateTime> tripDate, string targetedSpecies, string weatherConditions, string catchOfTheDay, string fliesLuresUsed, string waterConditions, string otherNotes)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var tripDateParameter = tripDate.HasValue ?
                new ObjectParameter("TripDate", tripDate) :
                new ObjectParameter("TripDate", typeof(System.DateTime));
    
            var targetedSpeciesParameter = targetedSpecies != null ?
                new ObjectParameter("TargetedSpecies", targetedSpecies) :
                new ObjectParameter("TargetedSpecies", typeof(string));
    
            var weatherConditionsParameter = weatherConditions != null ?
                new ObjectParameter("WeatherConditions", weatherConditions) :
                new ObjectParameter("WeatherConditions", typeof(string));
    
            var catchOfTheDayParameter = catchOfTheDay != null ?
                new ObjectParameter("CatchOfTheDay", catchOfTheDay) :
                new ObjectParameter("CatchOfTheDay", typeof(string));
    
            var fliesLuresUsedParameter = fliesLuresUsed != null ?
                new ObjectParameter("FliesLuresUsed", fliesLuresUsed) :
                new ObjectParameter("FliesLuresUsed", typeof(string));
    
            var waterConditionsParameter = waterConditions != null ?
                new ObjectParameter("WaterConditions", waterConditions) :
                new ObjectParameter("WaterConditions", typeof(string));
    
            var otherNotesParameter = otherNotes != null ?
                new ObjectParameter("OtherNotes", otherNotes) :
                new ObjectParameter("OtherNotes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTrip", titleParameter, descriptionParameter, tripDateParameter, targetedSpeciesParameter, weatherConditionsParameter, catchOfTheDayParameter, fliesLuresUsedParameter, waterConditionsParameter, otherNotesParameter);
        }
    }
}
